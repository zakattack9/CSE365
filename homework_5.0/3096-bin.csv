3096-bin,1,Skip to content,
3096-bin,2,Sign up,
3096-bin,3,Hosting,
3096-bin,4,Explore,
3096-bin,5,Explore GitHub →,
3096-bin,6,Learn & contribute,
3096-bin,7,Learning Lab,
3096-bin,8,Connect with others,
3096-bin,9,Compare plans,
3096-bin,10,Jump to,
3096-bin,11,Jump to,
3096-bin,12,Jump to,
3096-bin,13,Sign in,
3096-bin,14,Sign up,
3096-bin,15,Watch,
3096-bin,16,Fork,
3096-bin,17,Pull requests,
3096-bin,18,Pull requests,
3096-bin,19,Go to file,
3096-bin,20,Git stats,
3096-bin,21,Failed to load latest commit information.,
3096-bin,22,"Just give me a bit, the least significant's enough",
3096-bin,23,"Just a second we're not broken, just very, very insecure",
3096-bin,24,Running at rabit.pwning.xxx:7763,
3096-bin,25,Write-up,
3096-bin,26,This challenge consisted of the following python server:,
3096-bin,27,"FLAG = ""REDACTED""",
3096-bin,28,"while decrypt(padded, p, q) == None:",
3096-bin,29,"enc_flag = encrypt(padded, N)",
3096-bin,30,assert long_to_bytes(padded)[:len(FLAG)] == FLAG,
3096-bin,31,"assert decrypt(enc_flag, p, q) == padded",
3096-bin,32,"assert decrypt(2, p, q) != None",
3096-bin,33,"req.sendall(""Before we begin, a quick proof of work:\n"")",
3096-bin,34,"req.sendall(""Give me a string starting with {}, of length {}, such that its sha1 sum ends in ffffff\n"".format(prefix, len(prefix)+5))",
3096-bin,35,buf += req.recv(1),
3096-bin,36,"req.sendall(""Encrypted Flag: {}\n"".format(enc_flag))",
3096-bin,37,"req.sendall(""Give a ciphertext: "")",
3096-bin,38,"req.sendall(""lsb is {}\n"".format(m % 2))",
3096-bin,39,pass,
3096-bin,40,"print ""Listening on port %d"" % PORT",
3096-bin,41,When we connect to it it presents us with a simple proof-of-work after which we are given the flag in encrypted form and we can decrypt an arbitrary number of ciphertexts but we are only given the least significant bit of each corresponding plaintext,(I)
3096-bin,42,When we look at the encryption algorithm that's used we can identify it as the Rabin cryptosystem.,(I) 41
3096-bin,43,The problem with leaking the least significant bit of the flag plaintext here is that this presents us with a so-called parity oracle (ie,(I)
3096-bin,44,we can determine the plaintext parity from the LSB),(A) 43
3096-bin,45,This infoleak can be used in a variety of ways but in this case we can use it completely recover the plaintext.,(I)
3096-bin,46,In malleable cryptosystems like 'schoolbook' RSA and Rabin the property exists that:,(I)
3096-bin,47,As such we can arbitrarily multiply the plaintext,(I) 46
3096-bin,48,Hence if we choose to multiply the ciphertext with 2^2 we double the underlying plaintext of which we will get the LSB,(A) 47
3096-bin,49,We know that if the remainder after modular reduction is odd this indicates 2*P > N since N is odd and hence we know a 'modular wraparound' occurred,(I)
3096-bin,50,If the remainder is even we know 2*P < N since N is odd and hence we know it didn't 'wrap around the modulus',(I)
3096-bin,51,We can apply this process in incremental fashion to build a binary-search style algorithm which adjusts its lower and upper bound according to the results of these iterative multiplications allowing us to recover the plaintext in approximately O(log2(N)) time with the nice side-effect of giving 'hollywood-style' progressive decryption,"(A) 49, 50"
3096-bin,52,The code looks as follows:,
3096-bin,53,# Should be sufficient charset,
3096-bin,54,charset = string.letters + string.digits,
3096-bin,55,# Find proof-of-work candidate,
3096-bin,56,assert (len(candidate) == plen),
3096-bin,57,"raise Exception(""[-] Could not complete proof-of-work..."")",
3096-bin,58,"print ""[*] Got proof-of-work request [%s] (%s, %s), finding proof-of-work..."" % (prefix, plen, endv)",
3096-bin,59,"print ""[+] Found proof-of-work: [%s]"" % proof",
3096-bin,60,if not(lsb_line.startswith('lsb is')):,
3096-bin,61,"raise Exception(""[-] Invalid lsb line [%s]"" % lsb_line)",
3096-bin,62,return extract_lsb(lsb_line),
3096-bin,63,# mul_fac*m is odd so mul_fac*m > N (remainder after modular reduction is odd since N is odd),
3096-bin,64,# Hence m > N/mul_fac so we increase the lowerbound,
3096-bin,65,# mul_fac*m is even so mul_fac*m <= N,
3096-bin,66,# Hence m <= N/mul_fac so we decrease the upperbound,
3096-bin,67,"raise Exception(""[-] Invalid welcome message [%s]..."" % welcome)",
3096-bin,68,"raise Exception(""[-] Invalid eflag msg [%s]"" % encrypted_flag_msg)",
3096-bin,69,"print ""[*] Starting LSB oracle attack ...""",
3096-bin,70,Which after running gives us the flag:,
3096-bin,71,Help,
3096-bin,72,You can't perform that action at this time.,
3096-bin,73,You signed in with another tab or window,
3096-bin,74,Reload to refresh your session.,
3096-bin,75,You signed out in another tab or window,
3096-bin,76,Reload to refresh your session.,
3096-bin,77,We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.,
3096-bin,78,Learn more.,
3096-bin,79,Accept,
3096-bin,80,Reject,
3096-bin,81,We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.,
3096-bin,82,You can always update your selection by clicking Cookie Preferences at the bottom of the page.,
3096-bin,83,"For more information, see our Privacy Statement.",
3096-bin,84,"We use essential cookies to perform essential website functions, e.g",
3096-bin,85,they're used to log you in.,
3096-bin,86,Learn more,
3096-bin,87,"We use analytics cookies to understand how you use our websites so we can make them better, e.g",
3096-bin,88,they're used to gather information about the pages you visit and how many clicks you need to accomplish a task.,
3096-bin,89,Learn more,
3096-bin,90,Accept,
3096-bin,91,Reject,